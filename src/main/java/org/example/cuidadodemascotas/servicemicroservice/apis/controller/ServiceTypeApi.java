/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.cuidadodemascotas.servicemicroservice.apis.controller;

import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ApiError;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ServiceTypeRequestDTO;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ServiceTypeResponseDTO;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ServiceTypeResponseList;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-23T03:14:05.163097800-03:00[America/Asuncion]")
@Validated
@Tag(name = "ServiceType", description = "the ServiceType API")
public interface ServiceTypeApi {

    /**
     * POST /service-types : Crear un nuevo tipo de servicio
     *
     * @param serviceTypeRequestDTO  (required)
     * @return Tipo de servicio creado exitosamente (status code 201)
     *         or Solicitud inválida (status code 400)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "createServiceType",
        summary = "Crear un nuevo tipo de servicio",
        tags = { "ServiceType" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Tipo de servicio creado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceTypeResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/service-types",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ServiceTypeResponseDTO> createServiceType(
        @Parameter(name = "ServiceTypeRequestDTO", description = "", required = true) @Valid @RequestBody ServiceTypeRequestDTO serviceTypeRequestDTO
    );


    /**
     * DELETE /service-types/{id} : Eliminar un tipo de servicio
     *
     * @param id ID del tipo de servicio (required)
     * @return Tipo de servicio eliminado exitosamente (status code 204)
     *         or Tipo de servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "deleteServiceType",
        summary = "Eliminar un tipo de servicio",
        tags = { "ServiceType" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Tipo de servicio eliminado exitosamente"),
            @ApiResponse(responseCode = "404", description = "Tipo de servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/service-types/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteServiceType(
        @Parameter(name = "id", description = "ID del tipo de servicio", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /service-types/{id} : Obtener un tipo de servicio por ID
     *
     * @param id ID del tipo de servicio (required)
     * @return Tipo de servicio obtenido exitosamente (status code 200)
     *         or Tipo de servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getServiceTypeById",
        summary = "Obtener un tipo de servicio por ID",
        tags = { "ServiceType" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tipo de servicio obtenido exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceTypeResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tipo de servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/service-types/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ServiceTypeResponseDTO> getServiceTypeById(
        @Parameter(name = "id", description = "ID del tipo de servicio", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /service-types : Obtener todos los tipos de servicio con paginación
     *
     * @param page Número de página (base 0) (optional, default to 0)
     * @param size Tamaño de la página (optional, default to 20)
     * @param sort Campo para ordenar (ej. name,asc) (optional)
     * @return Tipos de servicio obtenidos exitosamente (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getServiceTypes",
        summary = "Obtener todos los tipos de servicio con paginación",
        tags = { "ServiceType" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tipos de servicio obtenidos exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceTypeResponseList.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/service-types",
        produces = { "application/json" }
    )
    
    ResponseEntity<ServiceTypeResponseList> getServiceTypes(
        @Parameter(name = "page", description = "Número de página (base 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Tamaño de la página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Campo para ordenar (ej. name,asc)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort
    );


    /**
     * PUT /service-types/{id} : Actualizar un tipo de servicio
     *
     * @param id ID del tipo de servicio (required)
     * @param serviceTypeRequestDTO  (required)
     * @return Tipo de servicio actualizado exitosamente (status code 200)
     *         or Tipo de servicio no encontrado (status code 404)
     *         or Solicitud inválida (status code 400)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "updateServiceType",
        summary = "Actualizar un tipo de servicio",
        tags = { "ServiceType" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tipo de servicio actualizado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceTypeResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tipo de servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/service-types/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ServiceTypeResponseDTO> updateServiceType(
        @Parameter(name = "id", description = "ID del tipo de servicio", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ServiceTypeRequestDTO", description = "", required = true) @Valid @RequestBody ServiceTypeRequestDTO serviceTypeRequestDTO
    );

}
