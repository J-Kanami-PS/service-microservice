/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.cuidadodemascotas.servicemicroservice.apis.controller;

import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ApiError;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.CarerWithServicesRequestDTO;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.CarerWithServicesResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-22T22:21:24.411320700-03:00[America/Asuncion]")
@Validated
@Tag(name = "Carer", description = "the Carer API")
public interface CarerApi {

    /**
     * POST /carers-with-services : Crear un cuidador con sus servicios (cabecera-detalle)
     * Endpoint para crear un cuidador junto con todos sus servicios en una sola transacción. Cumple con el criterio: \&quot;Guardar nuevos objetos mucho a mucho (un solo endpoint para guardar cabecera-detalle)\&quot;. 
     *
     * @param carerWithServicesRequestDTO  (required)
     * @return Cuidador creado exitosamente con sus servicios (status code 201)
     *         or Solicitud inválida (status code 400)
     *         or Usuario o tipo de servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "createCarerWithServices",
        summary = "Crear un cuidador con sus servicios (cabecera-detalle)",
        description = "Endpoint para crear un cuidador junto con todos sus servicios en una sola transacción. Cumple con el criterio: \"Guardar nuevos objetos mucho a mucho (un solo endpoint para guardar cabecera-detalle)\". ",
        tags = { "Carer" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Cuidador creado exitosamente con sus servicios", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CarerWithServicesResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Usuario o tipo de servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/carers-with-services",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<CarerWithServicesResponseDTO> createCarerWithServices(
        @Parameter(name = "CarerWithServicesRequestDTO", description = "", required = true) @Valid @RequestBody CarerWithServicesRequestDTO carerWithServicesRequestDTO
    );


    /**
     * GET /carers-with-services/{carerId} : Obtener un cuidador con todos sus servicios
     * Endpoint para obtener un cuidador junto con todos sus servicios asociados. Cumple con el criterio: \&quot;Obtener objeto relación mucho a mucho por id\&quot;. 
     *
     * @param carerId ID del cuidador (required)
     * @return Cuidador obtenido exitosamente con sus servicios (status code 200)
     *         or Cuidador no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getCarerWithServices",
        summary = "Obtener un cuidador con todos sus servicios",
        description = "Endpoint para obtener un cuidador junto con todos sus servicios asociados. Cumple con el criterio: \"Obtener objeto relación mucho a mucho por id\". ",
        tags = { "Carer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cuidador obtenido exitosamente con sus servicios", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CarerWithServicesResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cuidador no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/carers-with-services/{carerId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<CarerWithServicesResponseDTO> getCarerWithServices(
        @Parameter(name = "carerId", description = "ID del cuidador", required = true, in = ParameterIn.PATH) @PathVariable("carerId") Long carerId
    );


    /**
     * PUT /carers-with-services/{carerId} : Actualizar un cuidador con sus servicios (cabecera-detalle)
     * Endpoint para actualizar un cuidador y todos sus servicios en una sola transacción. Cumple con el criterio: \&quot;Modificar objeto con relación mucho a mucho (una sola llamada para actualizar cabecera-detalle)\&quot;. 
     *
     * @param carerId ID del cuidador (required)
     * @param carerWithServicesRequestDTO  (required)
     * @return Cuidador actualizado exitosamente con sus servicios (status code 200)
     *         or Solicitud inválida (status code 400)
     *         or Cuidador o tipo de servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "updateCarerWithServices",
        summary = "Actualizar un cuidador con sus servicios (cabecera-detalle)",
        description = "Endpoint para actualizar un cuidador y todos sus servicios en una sola transacción. Cumple con el criterio: \"Modificar objeto con relación mucho a mucho (una sola llamada para actualizar cabecera-detalle)\". ",
        tags = { "Carer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cuidador actualizado exitosamente con sus servicios", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CarerWithServicesResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cuidador o tipo de servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/carers-with-services/{carerId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<CarerWithServicesResponseDTO> updateCarerWithServices(
        @Parameter(name = "carerId", description = "ID del cuidador", required = true, in = ParameterIn.PATH) @PathVariable("carerId") Long carerId,
        @Parameter(name = "CarerWithServicesRequestDTO", description = "", required = true) @Valid @RequestBody CarerWithServicesRequestDTO carerWithServicesRequestDTO
    );

}
