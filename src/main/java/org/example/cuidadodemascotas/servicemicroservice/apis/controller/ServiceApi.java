/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.cuidadodemascotas.servicemicroservice.apis.controller;

import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ApiError;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ServiceRequestDTO;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ServiceResponseDTO;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ServiceResponseList;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-23T03:14:05.163097800-03:00[America/Asuncion]")
@Validated
@Tag(name = "Service", description = "the Service API")
public interface ServiceApi {

    /**
     * POST /services : Crear un nuevo servicio
     *
     * @param serviceRequestDTO  (required)
     * @return Servicio creado exitosamente (status code 201)
     *         or Solicitud inválida (status code 400)
     *         or Cuidador o tipo de servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "createService",
        summary = "Crear un nuevo servicio",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Servicio creado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cuidador o tipo de servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/services",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ServiceResponseDTO> createService(
        @Parameter(name = "ServiceRequestDTO", description = "", required = true) @Valid @RequestBody ServiceRequestDTO serviceRequestDTO
    );


    /**
     * DELETE /services/{id} : Eliminar lógicamente un servicio
     *
     * @param id ID del servicio (required)
     * @return Servicio eliminado exitosamente (status code 204)
     *         or Servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "deleteService",
        summary = "Eliminar lógicamente un servicio",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Servicio eliminado exitosamente"),
            @ApiResponse(responseCode = "404", description = "Servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/services/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteService(
        @Parameter(name = "id", description = "ID del servicio", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /services/{id} : Obtener un servicio por ID
     *
     * @param id ID del servicio (required)
     * @return Servicio obtenido exitosamente (status code 200)
     *         or Servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getServiceById",
        summary = "Obtener un servicio por ID",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Servicio obtenido exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ServiceResponseDTO> getServiceById(
        @Parameter(name = "id", description = "ID del servicio", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /services : Obtener todos los servicios con paginación
     *
     * @param page Número de página (base 0) (optional, default to 0)
     * @param size Tamaño de la página (optional, default to 10)
     * @return Servicios obtenidos exitosamente (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getServices",
        summary = "Obtener todos los servicios con paginación",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Servicios obtenidos exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceResponseList.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services",
        produces = { "application/json" }
    )
    
    ResponseEntity<ServiceResponseList> getServices(
        @Parameter(name = "page", description = "Número de página (base 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Tamaño de la página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    );


    /**
     * GET /services/carer/{carerId}/type/{serviceTypeId} : Obtener servicios filtrados por cuidador y tipo
     *
     * @param carerId ID del cuidador (required)
     * @param serviceTypeId ID del tipo de servicio (required)
     * @param page Número de página (base 0) (optional, default to 0)
     * @param size Tamaño de la página (optional, default to 10)
     * @return Servicios obtenidos exitosamente (status code 200)
     *         or Cuidador o tipo de servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getServicesByCarerAndType",
        summary = "Obtener servicios filtrados por cuidador y tipo",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Servicios obtenidos exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceResponseList.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cuidador o tipo de servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services/carer/{carerId}/type/{serviceTypeId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ServiceResponseList> getServicesByCarerAndType(
        @Parameter(name = "carerId", description = "ID del cuidador", required = true, in = ParameterIn.PATH) @PathVariable("carerId") Long carerId,
        @Parameter(name = "serviceTypeId", description = "ID del tipo de servicio", required = true, in = ParameterIn.PATH) @PathVariable("serviceTypeId") Long serviceTypeId,
        @Parameter(name = "page", description = "Número de página (base 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Tamaño de la página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    );


    /**
     * GET /services/carer/{carerId} : Obtener servicios filtrados por cuidador
     *
     * @param carerId ID del cuidador (required)
     * @param page Número de página (base 0) (optional, default to 0)
     * @param size Tamaño de la página (optional, default to 10)
     * @return Servicios del cuidador obtenidos exitosamente (status code 200)
     *         or Cuidador no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getServicesByCarerId",
        summary = "Obtener servicios filtrados por cuidador",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Servicios del cuidador obtenidos exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceResponseList.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cuidador no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services/carer/{carerId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ServiceResponseList> getServicesByCarerId(
        @Parameter(name = "carerId", description = "ID del cuidador", required = true, in = ParameterIn.PATH) @PathVariable("carerId") Long carerId,
        @Parameter(name = "page", description = "Número de página (base 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Tamaño de la página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    );


    /**
     * GET /services/price-range/{minPrice}/{maxPrice} : Obtener servicios filtrados por rango de precio
     *
     * @param minPrice Precio mínimo (required)
     * @param maxPrice Precio máximo (required)
     * @param page Número de página (base 0) (optional, default to 0)
     * @param size Tamaño de la página (optional, default to 10)
     * @return Servicios en rango de precio obtenidos exitosamente (status code 200)
     *         or Rango de precio inválido (status code 400)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getServicesByPriceRange",
        summary = "Obtener servicios filtrados por rango de precio",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Servicios en rango de precio obtenidos exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceResponseList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Rango de precio inválido", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services/price-range/{minPrice}/{maxPrice}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ServiceResponseList> getServicesByPriceRange(
        @Parameter(name = "minPrice", description = "Precio mínimo", required = true, in = ParameterIn.PATH) @PathVariable("minPrice") Double minPrice,
        @Parameter(name = "maxPrice", description = "Precio máximo", required = true, in = ParameterIn.PATH) @PathVariable("maxPrice") Double maxPrice,
        @Parameter(name = "page", description = "Número de página (base 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Tamaño de la página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    );


    /**
     * GET /services/type/{serviceTypeId} : Obtener servicios filtrados por tipo de servicio
     *
     * @param serviceTypeId ID del tipo de servicio (required)
     * @param page Número de página (base 0) (optional, default to 0)
     * @param size Tamaño de la página (optional, default to 10)
     * @return Servicios del tipo obtenidos exitosamente (status code 200)
     *         or Tipo de servicio no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getServicesByServiceTypeId",
        summary = "Obtener servicios filtrados por tipo de servicio",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Servicios del tipo obtenidos exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceResponseList.class))
            }),
            @ApiResponse(responseCode = "404", description = "Tipo de servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services/type/{serviceTypeId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ServiceResponseList> getServicesByServiceTypeId(
        @Parameter(name = "serviceTypeId", description = "ID del tipo de servicio", required = true, in = ParameterIn.PATH) @PathVariable("serviceTypeId") Long serviceTypeId,
        @Parameter(name = "page", description = "Número de página (base 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Tamaño de la página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    );


    /**
     * PUT /services/{id} : Actualizar un servicio
     *
     * @param id ID del servicio (required)
     * @param serviceRequestDTO  (required)
     * @return Servicio actualizado exitosamente (status code 200)
     *         or Servicio no encontrado (status code 404)
     *         or Solicitud inválida (status code 400)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "updateService",
        summary = "Actualizar un servicio",
        tags = { "Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Servicio actualizado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Servicio no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/services/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ServiceResponseDTO> updateService(
        @Parameter(name = "id", description = "ID del servicio", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ServiceRequestDTO", description = "", required = true) @Valid @RequestBody ServiceRequestDTO serviceRequestDTO
    );

}
