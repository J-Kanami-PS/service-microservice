/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.cuidadodemascotas.servicemicroservice.apis.controller;

import org.example.cuidadodemascotas.servicemicroservice.apis.dto.ApiError;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.OwnerResponseDTO;
import org.example.cuidadodemascotas.servicemicroservice.apis.dto.OwnerResponseList;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-23T03:14:05.163097800-03:00[America/Asuncion]")
@Validated
@Tag(name = "Owner", description = "the Owner API")
public interface OwnerApi {

    /**
     * GET /owners : Obtener todos los propietarios
     * Retorna la lista completa de propietarios disponibles en el sistema.
     *
     * @param page Número de página (base 0) (optional, default to 0)
     * @param size Tamaño de la página (optional, default to 20)
     * @return Propietarios obtenidos exitosamente (status code 200)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getAllOwners",
        summary = "Obtener todos los propietarios",
        description = "Retorna la lista completa de propietarios disponibles en el sistema.",
        tags = { "Owner" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Propietarios obtenidos exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OwnerResponseList.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/owners",
        produces = { "application/json" }
    )
    
    ResponseEntity<OwnerResponseList> getAllOwners(
        @Parameter(name = "page", description = "Número de página (base 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Tamaño de la página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /owners/{id} : Obtener un propietario por ID
     * Retorna los datos del propietario especificado por su ID.
     *
     * @param id ID del propietario (required)
     * @return Propietario obtenido exitosamente (status code 200)
     *         or Propietario no encontrado (status code 404)
     *         or Error interno del servidor (status code 500)
     */
    @Operation(
        operationId = "getOwnerById",
        summary = "Obtener un propietario por ID",
        description = "Retorna los datos del propietario especificado por su ID.",
        tags = { "Owner" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Propietario obtenido exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OwnerResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Propietario no encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/owners/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<OwnerResponseDTO> getOwnerById(
        @Parameter(name = "id", description = "ID del propietario", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

}
